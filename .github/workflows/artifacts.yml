name: Artifacts

on:
  push:
    branches:
      - main
      - next
  release:
    types:
      - published

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  binary_linux:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ./.github/actions/setup-rust
        with:
          target: aarch64-unknown-linux-gnu
      - run: |
          sudo apt-get update && sudo apt-get install -y g++-aarch64-linux-gnu
          mkdir .cargo
          echo -e "[target.aarch64-unknown-linux-gnu]\nlinker = \"aarch64-linux-gnu-gcc\"" >> .cargo/config.toml
      - run: cargo build --release --no-default-features
        working-directory: ./cli
      - run: cargo build --release --target aarch64-unknown-linux-gnu --no-default-features
        working-directory: ./cli
        env:
          BINDGEN_EXTRA_CLANG_ARGS: --sysroot /usr/aarch64-linux-gnu
      - uses: actions/upload-artifact@v4
        with:
          name: ontoenv_x86_64_linux_gnu
          path: target/release/ontoenv
      - uses: actions/upload-artifact@v4
        with:
          name: ontoenv_aarch64_linux_gnu
          path: target/aarch64-unknown-linux-gnu/release/ontoenv
      - run: mv target/release/ontoenv ontoenv_${{ github.event.release.tag_name }}_x86_64_linux_gnu
        if: github.event_name == 'release'
      - run: mv target/aarch64-unknown-linux-gnu/release/ontoenv ontoenv_${{ github.event.release.tag_name }}_aarch64_linux_gnu
        if: github.event_name == 'release'
      - uses: softprops/action-gh-release@v1
        with:
          files: |
            ontoenv_${{ github.event.release.tag_name }}_x86_64_linux_gnu
            ontoenv_${{ github.event.release.tag_name }}_aarch64_linux_gnu
        if: github.event_name == 'release'
  binary_mac:
    runs-on: macos-latest
    env:
      DEVELOPER_DIR: '/Applications/Xcode.app/Contents/Developer'
      SDKROOT: '/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk'
      MACOSX_DEPLOYMENT_TARGET: '10.14'
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: ./.github/actions/setup-rust
        with:
          target: aarch64-apple-darwin
      - run: cargo build --release
        working-directory: ./cli
      - run: cargo build --release --target aarch64-apple-darwin
        working-directory: ./cli
      - uses: actions/upload-artifact@v3
        with:
          name: ontoenv_x86_64_apple
          path: target/release/ontoenv
      - uses: actions/upload-artifact@v3
        with:
          name: ontoenv_aarch64_apple
          path: target/aarch64-apple-darwin/release/ontoenv
      - run: mv target/release/ontoenv ontoenv_${{ github.event.release.tag_name }}_x86_64_apple
        if: github.event_name == 'release'
      - run: mv target/aarch64-apple-darwin/release/ontoenv ontoenv_${{ github.event.release.tag_name }}_aarch64_apple
        if: github.event_name == 'release'
      - uses: softprops/action-gh-release@v1
        with:
          files: |
            ontoenv_${{ github.event.release.tag_name }}_x86_64_apple
            ontoenv_${{ github.event.release.tag_name }}_aarch64_apple
        if: github.event_name == 'release'

  binary_windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: ./.github/actions/setup-rust
      - run: Remove-Item -LiteralPath "C:\msys64\" -Force -Recurse
      - run: cargo build --release
        working-directory: ./cli
      - uses: actions/upload-artifact@v3
        with:
          name: ontoenv_x86_64_windows_msvc
          path: target/release/ontoenv.exe
      - run: mv target/release/ontoenv.exe ontoenv_${{ github.event.release.tag_name }}_x86_64_windows_msvc.exe
        if: github.event_name == 'release'
      - uses: softprops/action-gh-release@v1
        with:
          files: ontoenv_${{ github.event.release.tag_name }}_x86_64_windows_msvc.exe
        if: github.event_name == 'release'

  python_sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: ./.github/actions/setup-rust
      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: '**/requirements.dev.txt'
      - run: pip install -r python/requirements.dev.txt
      - run: maturin build -m python/Cargo.toml
      - run: pip install --no-index --find-links=target/wheels/ ontoenv
      - run: rm -r target/wheels
      - run: maturin sdist -m python/Cargo.toml
      - uses: actions/upload-artifact@v3
        with:
          name: ontoenv_dist
          path: target/wheels/*.tar.gz

  wheel_linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [ "x86_64", "aarch64" ]
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/${{ matrix.architecture }}
        if: github.event_name == 'release' && matrix.architecture != 'x86_64'
      - uses: ./.github/actions/setup-rust
      - run: sed 's/%arch%/${{ matrix.architecture }}/g' .github/workflows/manylinux_build.sh | sed 's/%for_each_version%/${{ github.event_name == 'release' || '' }}/g' > .github/workflows/manylinux_build_script.sh
      - run: docker run -v "$(pwd)":/workdir --platform linux/${{ matrix.architecture }} quay.io/pypa/manylinux2014_${{ matrix.architecture }} /bin/bash /workdir/.github/workflows/manylinux_build_script.sh
        if: github.event_name == 'release' || matrix.architecture == 'x86_64'
      - uses: actions/upload-artifact@v3
        with:
          name: ontoenv_dist
          path: target/wheels/*.whl

            #wheel_linux_musl:
            #  runs-on: ubuntu-latest
            #  strategy:
            #    matrix:
            #      architecture: [ "x86_64", "aarch64" ]
            #  continue-on-error: true
            #  steps:
            #    - uses: actions/checkout@v3
            #      with:
            #        submodules: true
            #    - uses: docker/setup-qemu-action@v2
            #      with:
            #        platforms: linux/${{ matrix.architecture }}
            #      if: github.event_name == 'release' && matrix.architecture != 'x86_64'
            #    - uses: ./.github/actions/setup-rust
            #    - run: sed 's/%arch%/${{ matrix.architecture }}/g' .github/workflows/musllinux_build.sh | sed 's/%for_each_version%/${{ github.event_name == 'release' || '' }}/g' > .github/workflows/musllinux_build_script.sh
            #    - run: docker run -v "$(pwd)":/workdir --platform linux/${{ matrix.architecture }} quay.io/pypa/musllinux_1_2_${{ matrix.architecture }} /bin/bash /workdir/.github/workflows/musllinux_build_script.sh
            #      if: github.event_name == 'release' || matrix.architecture == 'x86_64'
            #    - uses: actions/upload-artifact@v3
            #      with:
            #        name: ontoenv_dist
            #        path: target/wheels/*.whl

  wheel_mac:
    runs-on: macos-latest
    env:
      DEVELOPER_DIR: '/Applications/Xcode.app/Contents/Developer'
      SDKROOT: '/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk'
      MACOSX_DEPLOYMENT_TARGET: '10.14'
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: ./.github/actions/setup-rust
        with:
          target: aarch64-apple-darwin
      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: '**/requirements.dev.txt'
      - run: pip install -r python/requirements.dev.txt
      - run: maturin build --release --features abi3
        working-directory: ./python
      - run: pip install --no-index --find-links=target/wheels/ ontoenv
      - run: rm -r target/wheels
      - run: maturin build --release --target universal2-apple-darwin --features abi3
        working-directory: ./python
      - run: maturin build --release --features abi3
        working-directory: ./python
        if: github.event_name == 'release'
      - run: maturin build --release --target aarch64-apple-darwin --features abi3
        working-directory: ./python
        if: github.event_name == 'release'
      - uses: actions/upload-artifact@v3
        with:
          name: ontoenv_dist
          path: target/wheels/*.whl

  wheel_windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: ./.github/actions/setup-rust
      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: '**/requirements.dev.txt'
      - run: Remove-Item -LiteralPath "C:\msys64\" -Force -Recurse
      - run: pip install -r python/requirements.dev.txt
      - run: maturin build --release --features abi3
        working-directory: ./python
      - run: pip install --no-index --find-links=target/wheels/ ontoenv
      - run: rm -r target/wheels
      - run: maturin build --release -m python/Cargo.toml --features abi3
      - uses: actions/upload-artifact@v3
        with:
          name: ontoenv_dist
          path: target/wheels/*.whl

  publish_pypi:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/ontoenv
    permissions:
      id-token: write
    needs:
      - python_sdist
      - wheel_windows
      - wheel_mac
      - wheel_linux
        #- wheel_linux_musl
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ontoenv_dist
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          skip-existing: true

  publish_crates:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: rustup update
      - run: cargo login $CRATES_IO_TOKEN
        env:
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
      - run: cargo publish
        working-directory: ./lib/
        continue-on-error: true

  full_archive:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: |
          rm -rf .git bench fuzz
          zip -r ontoenv_${{ github.event.release.tag_name }}.zip .
          tar -czf /tmp/ontoenv_${{ github.event.release.tag_name }}.tar.gz .
          mv /tmp/ontoenv_${{ github.event.release.tag_name }}.tar.gz .
      - uses: softprops/action-gh-release@v1
        with:
          files: |
            ontoenv_${{ github.event.release.tag_name }}.zip
            ontoenv_${{ github.event.release.tag_name }}.tar.gz
